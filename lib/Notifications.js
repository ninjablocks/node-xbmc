// Generated by CoffeeScript 1.3.3
(function() {
  var Notifications, debug;

  debug = require('debug')('xbmc:Notifications');

  Notifications = (function() {

    function Notifications() {}

    Notifications.mixin = function(api) {
      var method, name;
      debug('mixin');
      this.api = api;
      api.notifications = {};
      for (name in this) {
        method = this[name];
        api.notifications[name] = method;
      }
      return delete api.notifications.mixin;
    };

    Notifications.delegate = function(data) {
      var type;
      debug('delegate', data);
      type = data.method.split('.On')[1].toLowerCase();
      Notifications.api.emit("notification:" + type, data);
      if (Notifications[type] != null) {
        return Notifications[type](data.params.data);
      } else {
        return console.log("Unhandled notification type: " + type);
      }
    };

    Notifications.play = function(data) {
      debug('play', data);
      return Notifications.api.handlers.players(data);
    };

    Notifications.stop = function(data) {
      if (data == null) {
        data = null;
      }
      debug('stop', data);
      return Notifications.api.emit('api:playerStopped', data);
    };

    Notifications.add = function() {
      return debug('add');
    };

    Notifications.update = function() {
      return debug('update');
    };

    Notifications.clear = function() {
      return debug('clear');
    };

    Notifications.scanstarted = function() {
      return debug('scanstarted');
    };

    Notifications.scanfinished = function() {
      return debug('scandfinished');
    };

    Notifications.pause = function() {
      return debug('pause');
    };

    Notifications.screensaveractivated = function() {
      return debug('screensaveractivated');
    };

    Notifications.screensaverdeactivated = function() {
      return debug('screensaverdeactivated');
    };

    Notifications.seek = function() {
      return debug('seek');
    };

    Notifications.volumechanged = function() {
      return debug('volumechanged');
    };

    Notifications.inputrequested = function() {
      debug('inputrequested');
      return Notifications.api.emit('api:Input.OnInputRequested');
    };

    Notifications.inputfinished = function() {
      debug('inputfinished');
      return Notifications.api.emit('api:Input.OnInputFinished');
    };

    Notifications.wake = function() {
      return debug('wake');
    };

    Notifications.sleep = function() {
      return debug('sleep');
    };

    Notifications.remove = function() {
      return debug('remove');
    };

    return Notifications;

  }).call(this);

  module.exports = Notifications;

}).call(this);
